<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAttack</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize vars
event_inherited();
startTime = 5350;
endTime = 5900;

shotInterval = 70;
shotsPerBurst = 3;
bulletSpeed = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (running)
{    
    if (counter mod shotInterval == 0) //spawn a shot
    {
        var angle = 0;
        var sectorSize = 360/shotsPerBurst;
        for (var i = 0; i &lt; shotsPerBurst; i++)
        {
            var rock = instance_create(room_width/2, room_height/2, objRockBouncing);
            rock.direction = angle + random_range(sectorSize/5, 4*sectorSize/5);
            rock.speed = bulletSpeed;
            rock.image_xscale = 0.7;
            rock.image_yscale = 0.7;
            
            angle += sectorSize;
        }
        
        with (objBigRock)
        {
            grow = -1;
            effect_create_above(ef_smoke, x, y, 0, make_color_hsv(color_get_hue(blendColor),
                                color_get_saturation(blendColor)-50, color_get_value(blendColor)-150));
        }
    }
    else if (counter mod (shotInterval/2) == 0 &amp;&amp; global.avTimer &lt; endTime - shotInterval) //grow big rock back up
    {
        with (objBigRock) grow = 4/other.shotInterval;
    }
    
    if (global.avTimer == endTime - 1)
    {
        with (objRockBouncing)
        {
            var angle = irandom(120);
            for (var i = 0; i &lt; 3; i++)
            {
                var shard = instance_create(x, y, objRockShard);
                shard.image_angle = angle;
                shard.image_xscale = image_xscale;
                shard.image_yscale = image_yscale;
                shard.speed /= 2;
                shard.hspeed += hspeed;
                shard.vspeed += vspeed;
                angle += 120;
            }
            effect_create_above(ef_smoke, x, y, 0, make_color_hsv(color_get_hue(blendColor),
                                color_get_saturation(blendColor)-50, color_get_value(blendColor)-150));
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
