<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAttack</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize vars
event_inherited();
startTime = 1240;
endTime = 2441;

playerArea = 20;
clearZone = 5;
moving = true;
bulletSpeed = 7;
shotInterval = 3;
atPlayerInterval = 8;
curve = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (running)
{
    if (counter &gt; 1090)
    {
        /*var angle = random(14);
        while (angle &lt; 360)
        {
            var bullet = instance_create(room_width/2, room_height/2, objStoneBullet);
            bullet.direction = angle;
            bullet.speed = 5;
                
            angle += 15;
        }*/
        
        with (objStoneBullet)
        {
            var burstTime = 1189;
            if (other.counter == 1091)
            {
                /*calculate the amount the bullet needs to turn to end up going directly
                 *away from the center at the end of the rotation*/
                var angle = angle_difference(direction, point_direction(room_width/2, room_height/2, x, y));
                var sgn = sign(angle); if (sgn == 0) sgn = 1;
                curveAmount = sgn*(360 - abs(angle))/(burstTime-1091);
            }
            else if (other.counter &lt; burstTime)
            {
                speed = max(0.9*speed, 1);
            }
            else if (other.counter == burstTime)
            {
                direction = point_direction(room_width/2, room_height/2, x, y);
                curveAmount = 0;
            }
            else speed *= 1.27;
        }
    }
    else
    {
        //spawn a shot
        if (counter mod shotInterval == 0)
        {
            var bullet = instance_create(room_width/2, room_height/2, objStutterShot);
            var playerDir = point_direction(room_width/2, room_height/2, objPlayer.x, objPlayer.y);
            if (counter mod (shotInterval*atPlayerInterval) == 0)
            {
                bullet.direction = random_range(playerDir - playerArea, playerDir + playerArea);
            }
            else bullet.direction = random_range(playerDir + playerArea + clearZone, (playerDir - playerArea - clearZone) + 360);
            
            bullet.speed = bulletSpeed;
        }
        
        //stop and start
        if ((counter / 8.5) % 1 == 0)
        {
            if (moving)
            {
                moving = false;
                with (objStutterShot)
                {
                    if (other.counter &lt; 540) speed = 0;
                    else speed = other.bulletSpeed / 3;
                    curveAmount = curveDir * other.curve;
                    curveDir = -curveDir;
                }
            }
            else
            {
                moving = true;
                with (objStutterShot)
                {
                    speed = other.bulletSpeed;
                    curveAmount = 0;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
