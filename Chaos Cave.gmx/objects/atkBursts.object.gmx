<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAttack</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set start time
event_inherited();
startTime = 7135;
endTime = 8250;

burstInterval = 34;
burstCounter = 1;

angleRange = 3;
gapSize = 100;

numCornerBullets = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (running)
{
    if (counter mod burstInterval == 0) 
    {
        var burst = burstCounter div 2;
        if (burstCounter mod 2 == 0) //straight burst out of entire wall
        {
            var nextX = -20;
            var nextY = -20; 
            var phase = burst mod 4;
            if (phase == 0) nextX = room_width;
            else if (phase == 3) nextY = room_height;
            
            var incrX = burst mod 2 == 1; // whether or not to increment X
            var incrY = (burst + 1) mod 2 == 1; //same with Y
            
            var angle = ((phase)*90 + 180) mod 360;
            
            while ((incrX &amp;&amp; nextX &lt; room_width - gapSize - 40) 
                            || (incrY &amp;&amp; nextY &lt; room_height - gapSize - 40))
            {
                if (incrX) nextX += random_range(gapSize, gapSize + 10);
                if (incrY) nextY += random_range(gapSize, gapSize + 10);
                var bullet = instance_create(nextX, nextY, objStoneBullet);
                bullet.direction = random_range(angle - angleRange, angle + angleRange);
                bullet.speed = random_range(6, 8);
            }
        }
        else if (burstCounter mod 2 == 1) //gravity burst out of corners
        {
            var phase = (burst + 1) mod 4;
            var startX = 0;
            var startY = 0;

            if (phase &lt;= 1) startX = room_width;
            if (phase == 3 || phase == 0) startY = room_height;
            
            var angle = ((phase + 1)*90) mod 360 - 15;
            if (phase &gt;= 2) angle += 45;
            var angleIncr = 75/numCornerBullets;
            
            for (var i = 0; i &lt; numCornerBullets; i++)
            {
                var bullet = instance_create(startX, startY, objStoneBullet);
                bullet.direction = angle + random_range(angleIncr/3, 2*angleIncr/3);
                bullet.speed = 1;
                bullet.speed = random_range(0, 2) + sign(startY)*13 + abs(bullet.hspeed*sign(room_height - startY))*9;
                bullet.gravity = 0.18 - sign(room_height - startY)*0.03;
                
                angle += angleIncr;
            }
        }
        
        if (burstCounter &gt; 8 || (counter div burstInterval) mod 2 == 1) burstCounter++;
        
        if (burstCounter &gt; 24) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
