<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLaser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>101</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprLaserMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>firing = false; //does it kill or is it just charging up
destroy = false; // are we supposed to be destroying the laser
image_blend = c_red;
image_alpha = 0.8;
image_yscale = 0;
fixedLength = false; //whether or not to calculate distance to edge every frame
targeted = false; //aim at the target coordinates or not
targetX = 0;
targetY = 0;

turnAmount = 0;
turnInterval = 1;
counter = 0;

prevWallX = -1;
prevWallY = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (counter mod turnInterval == 0) direction += turnAmount;

if (targeted)
{
    direction = point_direction(x, y, targetX, targetY);
    if (fixedLength) image_xscale = point_distance(x, y, targetX, targetY);
}


if (destroy) //pop in / pop out
{
    image_yscale -= 0.1;
    if (image_yscale &lt;= 0.1) instance_destroy();
    else if (image_yscale &lt;= 0.5) firing = false;
}
else
{
    if (image_yscale &lt;= 0.9) image_yscale += 0.1;
    else image_yscale = 1.0;
}


counter++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (firing) scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (firing) image_index = 1;
else image_index = 0;

if (!fixedLength) {
    /*do some math to figure out the distance to the nearest wall and set image width to that distance
    so the laser always ends at the edge of the room*/
    //first, determine which quarter of the room we're aiming at so we know which walls to look for
    var quarter = direction div 90;
    var targetX = 28;
    if (quarter == 0 || quarter == 3) targetX = room_width - 28;
    var targetY = 28;
    if (quarter == 2 || quarter == 3) targetY = room_height - 28;
    //choose whichever distance to a wall ends up being the shorter one, but first make sure we're not dividing by zero
    var cosDir = dcos(direction);
    var sinDir = dsin(direction);
    if (cosDir == 0) image_xscale = sinDir*(y - targetY);
    else if (sinDir == 0) image_xscale = cosDir*(targetX - x);
    else image_xscale = min((targetX - x)/cosDir, (y - targetY)/sinDir);
    
    
    if (firing) //spawn wall glow where the laser ends 
    {
        var wallX = x + cosDir*image_xscale;
        var wallY = y - sinDir*image_xscale;
        //spawn sparks
        if (global.particlesEnabled &amp;&amp; counter mod 2 == 0)
        {
            part_particles_create_color(global.particleSystem, wallX, wallY,
                global.pSpark, c_red, 1);
        }
        wallX = wallX div 32;
        wallY = wallY div 32;
        if (prevWallX &lt; 0) prevWallX = wallX;
        if (prevWallY &lt; 0) prevWallY = wallY;
        var changeX = wallX - prevWallX;
        var changeY = wallY - prevWallY;
        
        //spawn glow on every tile the laser "touched" in the last frame (this could probably be done better)
        if (changeX != 0 &amp;&amp; changeY != 0)
        {
            if (prevWallY == 0 || prevWallY == 18)
            {
                for (var ix = 1; ix &lt;= abs(changeX); ix++) with(scrWallGlowAt(prevWallX + ix*sign(changeX), prevWallY)) fadeIn = 0.02;
                for (var iy = 1; iy &lt;= abs(changeY); iy++) with(scrWallGlowAt(wallX, prevWallY + iy*sign(changeY))) fadeIn = 0.02;
            }
            else
            {
                for (var ix = 1; ix &lt;= abs(changeX); ix++) with(scrWallGlowAt(prevWallX + ix*sign(changeX), wallY)) fadeIn = 0.02;
                for (var iy = 1; iy &lt;= abs(changeY); iy++) with(scrWallGlowAt(prevWallX, prevWallY + iy*sign(changeY))) fadeIn = 0.02;
            }    
        }
        else if (changeX != 0)
            for (var ix = 1; ix &lt;= abs(changeX); ix++) with(scrWallGlowAt(prevWallX + ix*sign(changeX), prevWallY)) fadeIn = 0.02;
        else if (changeY != 0)
            for (var iy = 1; iy &lt;= abs(changeY); iy++) with(scrWallGlowAt(prevWallX, prevWallY + iy*sign(changeY))) fadeIn = 0.02;
            
        prevWallX = wallX;
        prevWallY = wallY;
        
        
    }
    else
    {
        prevWallX = -1;
        prevWallY = -1;
    }
}

image_angle = direction;

draw_set_blend_mode(bm_add);
draw_self();
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
