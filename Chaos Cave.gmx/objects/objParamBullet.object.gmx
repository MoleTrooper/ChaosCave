<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
event_inherited();
rootX = 0; //start/center point of the curve
rootY = 0;
rotation = 0; //rotation of the curve
scaleX = 100; //scaling of the curve
scaleY = 100;
tSpeed = 0.05; //speed at which to traverse curve
curveType = 0;
/*
* 0 = line
* 1 = sin(2t), cos(3t)
*/

t = 0;
endT = -1;
curving = true;
prevX = 0;
prevY = 0;
realSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (curving)
{
    switch (curveType)
    {
        case 0: //line at 45 degree angle
            x = t;
            y = t;
            break;
        case 1: //circle
            x = cos(t);
            y = sin(t);
            break;
        case 2: //spiral
            x = t*cos(t);
            y = t*sin(t);
            break;
        default:
            x = 0;
            y = 0;
            break;
    }
    //scale position
    x *= scaleX;
    y *= scaleY;
    //rotate position around origin
    var newX = x*cos(rotation) - y*sin(rotation);
    var newY = x*sin(rotation) + y*cos(rotation);
    x = newX;
    y = newY;
    //translate position
    x += rootX;
    y += rootY;
        
    //rotate image to face movement direction
    image_angle = point_direction(prevX, prevY, x, y);
        
    //increment the parameter, update speed and previous position
    t += tSpeed;
    realSpeed = point_distance(prevX, prevY, x, y);
    if (t &gt; endT)
    {
        //if end of curve has been reached, start going straight like a normal bullet
        speed = realSpeed;
        curving = false;
    }
    prevX = x;
    prevY = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
